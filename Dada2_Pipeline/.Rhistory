# The PR2 database has pre-formatted files suitable for dada2  for both 18S and 16S
#
# This step depends on the kind of taxonomic assignment that will be used later
# The PR2 database is a curated quality database for protists, with 8 taxonomic ranks
PR2_tax_levels <- c("Kingdom", "Supergroup", "Division", "Class",
"Order", "Family",
"Genus", "Species")
dim(updated.taxa)
head(updated.taxa)
# Export information in tab or comma separated files
# Tab:
write_tsv(as_tibble(taxa$tax), file = str_c(dada2_dir, "taxa.txt"))
taxa <- readRDS("~/Dropbox/Projects/00_Master_projects/21_undervisning/2023/Bio9905merg1_v23/BIO9905MERG1_V23/Dada2_Pipeline/taxa.rds")
taxa
updated.taxa
# Export information in tab or comma separated files
# Tab:
write_tsv(as_tibble(taxa$tax), file = str_c(dada2_dir, "taxa.txt"))
#### Appending taxonomy and boot to the sequence table ####
taxa_tax <- as.data.frame(taxa$tax)
taxa_boot <- as.data.frame(taxa$boot)
colnames(taxa_boot) <- paste0(colnames(taxa_boot),"_boot")
seqtab.nochim_trans <- taxa_tax %>% bind_cols(taxa_boot) %>% bind_cols(seqtab.nochim_trans)
dada
# inner_join(seqtab.nochim_trans, rownames_to_column(taxa_tax), by=c("sequence" = "rowname"))
seqtab.nochim_trans <- taxa_tax %>% bind_cols(taxa_boot) %>% bind_cols(seqtab.nochim_trans)
rlang::last_trace()
seqtab.nochim
dim(seqtab.nochim)
length(taxa_boot)
dim(taxa_boot)
save.image(.Rdata)
save.image(".Rdata)
""
)
save.image(".Rdata")
save.image("x.Rdata")
seqtab.nochim_trans <- readRDS("~/Dropbox/Projects/00_Master_projects/21_undervisning/2023/Bio9905merg1_v23/BIO9905MERG1_V23/Dada2_Pipeline/seqtab.nochim_trans.rds")
updated.taxa <- readRDS("~/Dropbox/Projects/00_Master_projects/21_undervisning/2023/Bio9905merg1_v23/BIO9905MERG1_V23/Dada2_Pipeline/updated.taxa.rds")
taxa <- updated.taxa
# Export information in tab or comma separated files
# Tab:
write_tsv(as_tibble(taxa$tax), file = str_c(dada2_dir, "taxa.txt"))
#### Appending taxonomy and boot to the sequence table ####
taxa_tax <- as.data.frame(taxa$tax)
taxa_boot <- as.data.frame(taxa$boot)
colnames(taxa_boot) <- paste0(colnames(taxa_boot),"_boot")
# inner_join(seqtab.nochim_trans, rownames_to_column(taxa_tax), by=c("sequence" = "rowname"))
seqtab.nochim_trans <- taxa_tax %>% bind_cols(taxa_boot) %>% bind_cols(seqtab.nochim_trans)
# inner_join(seqtab.nochim_trans, rownames_to_column(taxa_tax), by=c("sequence" = "rowname"))
seqtab.nochim_trans <- taxa_tax %>% bind_cols(taxa_boot) %>% bind_cols(seqtab.nochim_trans)
#Check at the Kingdom-level for
unique(seqtab.nochim_trans$Kingdom)
unique(seqtab.nochim_trans$Supergroup)
# inner_join(seqtab.nochim_trans, rownames_to_column(taxa_tax), by=c("sequence" = "rowname"))
seqtab.nochim_trans <- taxa_tax %>% bind_cols(taxa_boot) %>% bind_cols(seqtab.nochim_trans)
seqtab.nochim_trans
#Check at the Kingdom-level for
unique(seqtab.nochim_trans$Kingdom)
seqtab.nochim_trans$Kingdom
seqtab.nochim_trans$Kingdom...1
seqtab.nochim_trans
taxa_tax %>% bind_cols(taxa_boot)
taxa_tax %>% bind_cols(taxa_boot) %>% bind_cols(seqtab.nochim_trans)
colnames(taxa_boot)
colnames(taxa)
str(taxa)
taxa_tax
seqtab.nochim_trans <- taxa_tax %>% bind_cols(taxa_boot) %>% bind_cols(seqtab.nochim_trans)
taxa$tax
axa$boot
taxa$boot
nner_join(seqtab.nochim_trans, rownames_to_column(taxa_tax), by=c("sequence" = "rowname"))
inner_join(seqtab.nochim_trans, rownames_to_column(taxa_tax), by=c("sequence" = "rowname"))
#### Transforming and saving the OTU sequences
seqtab.nochim_trans <- as.data.frame(t(seqtab.nochim)) %>% rownames_to_column(var = "sequence") %>%
rowid_to_column(var = "OTUNumber") %>% mutate(OTUNumber = sprintf("OTU_%05d",
OTUNumber)) %>% mutate(sequence = str_replace_all(sequence, "(-|\\.)", ""))
seqtab.nochim_trans
# inner_join(seqtab.nochim_trans, rownames_to_column(taxa_tax), by=c("sequence" = "rowname"))
seqtab.nochim_trans <- taxa_tax %>% bind_cols(taxa_boot) %>% bind_cols(seqtab.nochim_trans)
seqtab.nochim_trans
#Check at the Kingdom-level for
unique(seqtab.nochim_trans$Kingdom)
unique(seqtab.nochim_trans$Supergroup)
save.image("~/Dropbox/Projects/00_Master_projects/21_undervisning/2023/Bio9905merg1_v23/BIO9905MERG1_V23/Dada2_Pipeline/dada2.RData")
#### Filter for 18S ####
# Define a minimum bootstrap value for filtering
# Think before applying the cut-off! What is the benefits of removing
# OTUs with low support? What are the drawbacks?
bootstrap_min <- 80
# Remove OTU with annotation below the bootstrap value
seqtab.nochim_18S <- seqtab.nochim_trans %>% dplyr::filter(Supergroup_boot >= bootstrap_min)
seqtab.nochim_18S <- seqtab.nochim_trans[which(seqtab.nochim_trans$Supergroup_boot>80),]
unique(seqtab.nochim_18S$Division)
unique(seqtab.nochim_18S$Kigdom)
unique(seqtab.nochim_18S$Kingdom)
# Example for removing Metazoans:
seqtab.nochim_18S_noMetazoa <- seqtab.nochim_18S[which(seqtab.nochim_18S$Division!="Metazoa"),]
bootstrap_min <- 80
seqtab.nochim_18S_lowsupport<- seqtab.nochim_trans %>% dplyr::filter(Supergroup_boot <= bootstrap_min)
seqtab.nochim_18S_lowsupport
write_tsv(seqtab.nochim_18S, str_c(dada2_dir, "OTU_table.tsv"))
write_tsv(seqtab.nochim_18S_noMetazoa, str_c(dada2_dir, "OTU_table_noMetazoa.tsv"))
write_tsv(seqtab.nochim_18S_lowsupport, str_c(dada2_dir, "OTU_table_lowsupport.tsv"))
df <- seqtab.nochim_trans
seq_out <- Biostrings::DNAStringSet(df$sequence)
names(seq_out) <- str_c(df$OTUNumber, df$Supergroup, df$Division, df$Class,
df$Order, df$Family, df$Genus, df$Species, df$Species_boot1, sep = "|")
Biostrings::writeXStringSet(seq_out, str_c(blast_dir, "OTU.fasta"), compress = FALSE,
width = 20000)
#### Make Phyloseq Object ####
samdf <- data.frame(sample_name = sample.names)
rownames(samdf) <- sample.names
rownames(seqtab.nochim_18S)<-seqtab.nochim_18S$OTUNumber
OTU <- seqtab.nochim_18S %>% select_if(is.numeric) %>%
select(-contains("_boot")) %>% as.matrix() %>% otu_table(taxa_are_rows = TRUE)
TAX <- seqtab.nochim_18S %>% select(Kingdom:Species) %>%
as.matrix() %>% tax_table()
ps_dada2 <- phyloseq(OTU, sample_data(samdf), TAX)
### Bar graphs ####
# Phyloseq contains wrappers for plotting functions
plot(ps_dada2)
library(phyloseq)
### Bar graphs ####
# Phyloseq contains wrappers for plotting functions
plot(ps_dada2)
class(ps_dada2)
### Bar graphs ####
# Phyloseq contains wrappers for plotting functions
phyloseq::plot(ps_dada2)
??phyloseq
library("phyloseq")
library("ggplot2")
plot_bar(ps_dada2)
plot_bar(ps_dada2, fill = "Division")
plot_bar(ps_dada2, fill = "Supergroup")
tax(ps_dada2)
tax_table(ps_dada2)
ps_dada2
### Bar graphs ####
# Phyloseq contains wrappers for plotting functions
plot_bar(ps_dada2)
plot_bar(ps_dada2, fill = "Division")
plot_bar(ps_dada2, fill = "Supergroup")
plot_bar(ps_dada2, fill = "Division")
rank_names(ps_dada2)
otu_table(ps_dada2)
### Bar graphs ####
# Phyloseq contains wrappers for plotting functions
plot_bar(ps_dada2)
plot_bar(ps_dada2, fill = "Division")
plot_bar(ps_dada2, fill = "Supergroup")
plot_bar(ps_dada2, fill = "Supergroup")
### Subsetting taxa ####
SAR <- subset_taxa(ps_dada2,  Supergroup %in% c("Alveolata","Stramenopiles","Rhizaria"))
SAR
plot_bar(SAR, fill = "Division")
?aggregate
plot_bar(SAR, fill = "Division") +
geom_bar(aes(color=Division, fill=Division), stat="identity", position="stack")
plot_bar(ps_dada2, fill = "Division")
# Make it a bit better with ggplot
plot_bar(ps_dada2, fill = "Division")+
geom_bar(aes(color=Division, fill=Division), stat="identity", position="stack")
# Make it a bit better with ggplot
plot_bar(ps_dada2, fill = "Division")+
geom_bar(aes(color=Supergroup, fill=Division), stat="identity", position="stack")
# Make it a bit better with ggplot
plot_bar(ps_dada2, fill = "Division")+
geom_bar(aes(color=Division, fill=Supergroup), stat="identity", position="stack")
?geom_bar
plot_bar(SAR, fill = "Division") +
geom_bar(aes(color=Division, fill=Division), stat="count", position="stack")
plot_bar(SAR, fill = "Division") +
geom_bar(aes(color=Division, fill=Division), stat="identity", position="stack")
# Make it a bit better with
plot_bar(ps_dada2, fill = "Division")+
geom_col(aes(color=Division, fill=Division), stat="identity", position="stack")
# Make it a bit better with
plot_bar(ps_dada2, fill = "Division")+
geom_bar(aes(color=Division, fill=Division), stat="identity", position="stack")
### Subsetting taxa ####
SAR <- subset_taxa(ps_dada2,  Supergroup %in% c("Alveolata","Stramenopiles","Rhizaria"))
aggregate_
plot_bar(SAR, fill = "Division") +
geom_bar(aes(color=Division, fill=Division), stat="identity", position="stack")
chloro <- subset_taxa(ps_dada2, Division %in% c("Chlorophyta"))
plot_bar(chloro, x="Genus", fill = "Genus")+#, facet_grid = level~Class) +
geom_bar(aes(color=Genus, fill=Genus), stat="identity", position="stack")
chloro <- subset_taxa(ps_dada2, Division %in% c("Rhizaria"))
chloro <- subset_taxa(ps_dada2, Supergroup %in% c("Rhizaria"))
rm(chloro)
Rhizaria <- subset_taxa(ps_dada2, Supergroup %in% c("Rhizaria"))
plot_bar(Rhizaria, x="Genus", fill = "Genus")+#, facet_grid = level~Class) +
geom_bar(aes(color=Genus, fill=Genus), stat="identity", position="stack")
rank_names(ps_dada2)
plot_bar(Rhizaria, x="Order", fill = "Order")
geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack")
plot_bar(Rhizaria, x="Order", fill = "Order")
plot_bar(Rhizaria, x="Order", fill = "Order") +
geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack")
plot_bar(Rhizaria, fill = "Order") +
geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack")
plot_bar(Rhizaria, x="Order", fill = "Order") +
geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack")
plot_bar(Rhizaria, x="Order", fill = "Order") +
geom_bar(aes(color=Order, fill=Order), stat="identity", position="stack") +
theme(legend.position="none")
plot_heatmap(ps_dada2, method = "NMDS", distance = "bray")
total <- median(sample_sums(ps_dada2))
standf <- function(x, t=total) round(t * (x / sum(x)))
ps_dada2_x <- transform_sample_counts(ps_dada2, standf)
ps_dada2_x
otu_table(ps_dada2_x)
?transform_sample_counts
otu_table(ps_dada2_x)
otu_table(ps_dada2)
otu_table(ps_dada2_x)
ps_dada2_trans <- transform_sample_counts(ps_dada2, standf)
plot_bar(ps_dada2, fill = "Supergroup")
# Make it a bit better with
plot_bar(ps_dada2, fill = "Division")+
geom_bar(aes(color=Division, fill=Division), stat="identity", position="stack")
plot_bar(ps_dada2, fill = "Division")+
geom_bar(aes(color=Division, fill=Division), stat="identity", position="stack")
plot_bar(ps_dada2_trans, fill = "Division")+
geom_bar(aes(color=Division, fill=Division), stat="identity", position="stack")
plot_heatmap(ps_dada2_trans, method = "NMDS", distance = "bray")
plot_heatmap(ps_dada2_trans, method = "MDS", distance = "(A+B-2*J)/(A+B-J)", #
taxa.label = "Genus", taxa.order = "Genus",
trans=NULL, low="beige", high="red", na.value="beige")
ps_dada2_trans_abund <- filter_taxa(ps_dada2_trans, function(x) sum(x > total*0.10) > 0, TRUE)
ps_dada2_trans_abund
plot_heatmap(ps_dada2_trans_abund, method = "MDS", distance = "(A+B-2*J)/(A+B-J)", #
taxa.label = "Genus", taxa.order = "Genus",
trans=NULL, low="beige", high="red", na.value="beige")
# For example one can only take OTUs that represent at least 10% of reads in at least one sample.
# Remember we normalized all the sampples to median number of reads (total).
ps_dada2_trans_abund <- filter_taxa(ps_dada2_trans, function(x) sum(x > total*0.05) > 0, TRUE)
plot_heatmap(ps_dada2_trans_abund, method = "MDS", distance = "(A+B-2*J)/(A+B-J)", #
taxa.label = "Genus", taxa.order = "Genus",
trans=NULL, low="beige", high="red", na.value="beige")
plot_heatmap(oslo_fjord, method = "NMDS", distance = "bray")
plot_heatmap(ps_dada2_trans_abund, method = "MDS", distance = "bray", #
taxa.label = "Genus", taxa.order = "Genus",
trans=NULL, low="beige", high="red", na.value="beige")
library("microbiome")
install.packages(microbiome)
BiocManager::install("microbiome")
oslo_fjord_rel <- transform(oslo_fjord, "compositional")
ps_dada_rel <- transform(ps_dada, "compositional")
ps_dada2_rel <- transform(ps_dada2, "compositional")
ps_dada2
ps_dada2_rel
ps_dada2_trans_abund
# ordination of samples:
plot_ordination(ps_dada2_trans, oslo_fjord.ord, type="samples")
# ordination of samples:
ps_dada2_trans.ord <- ordinate(ps_dada2_trans, "NMDS", "bray")
plot_ordination(ps_dada2_trans, ps_dada2_trans.ord, type="samples")
plot_ordination(ps_dada2_trans, ps_dada2_trans.ord, type="taxa", color="Class", shape= "Division",
title="OTUs")
plot_bar(ps_dada2_trans, fill = "Division")+
geom_bar(aes(color=Division, fill=Division), stat="identity", position="stack")
rank_names(ps_dada2)
plot_ordination(ps_dada2_trans, ps_dada2_trans.ord, type="taxa", color="Division", shape= "Supergroup",
title="OTUs")
plot_ordination(ps_dada2_trans, ps_dada2_trans.ord, type="taxa", color="Division", shape= "Kingdom",
title="OTUs")
plot_ordination(ps_dada2_trans, ps_dada2_trans.ord, type="samples")
plot_ordination(ps_dada2_trans, ps_dada2_trans.ord, type="taxa", color="Division", shape= "Kingdom",
title="OTUs")
plot_ordination(ps_dada2_trans, ps_dada2_trans.ord, type="taxa", color="Division",
title="OTUs")
plot_ordination(ps_dada2_trans, ps_dada2_trans.ord, type="taxa", color="Supergroup",
title="OTUs")
# ordination of samples:
ps_dada2_trans.ord <- ordinate(ps_dada2, "NMDS", "bray")
plot_ordination(ps_dada2, ps_dada2_trans.ord, type="samples")
plot_ordination(ps_dada2, ps_dada2_trans.ord, type="taxa", color="Supergroup",
title="OTUs")
# ordination of samples:
ps_dada2_trans.ord <- ordinate(ps_dada2_trans, "NMDS", "bray")
plot_ordination(ps_dada2_trans, ps_dada2_trans.ord, type="samples")
plot_ordination(ps_dada2_trans, ps_dada2_trans.ord, type="taxa", color="Supergroup",
title="OTUs")
save.image("dada2.RData")
#### Prepare Directories ####
# The fastq files are in this zip-file:
# https://www.dropbox.com/s/szz60vroo79imyd/fastq_files.zip?dl=0
# Download and unzip in your dada2 working directory.
# The samples should be in a subfolder simply called "fastq"
# Check your current working directory:
getwd()
setwd("~/Dropbox/Projects/00_Master_projects/21_undervisning/2023/Bio9905merg1_v23/BIO9905MERG1_V23/Dada2_Pipeline")
#### Prepare Directories ####
# The fastq files are in this zip-file:
# https://www.dropbox.com/s/szz60vroo79imyd/fastq_files.zip?dl=0
# Download and unzip in your dada2 working directory.
# The samples should be in a subfolder simply called "fastq"
# Check your current working directory:
getwd()
#### Prepare Directories ####
# The fastq files are in this zip-file:
# https://www.dropbox.com/s/szz60vroo79imyd/fastq_files.zip?dl=0
# Download and unzip in your dada2 working directory.
# The samples should be in a subfolder simply called "fastq"
# Check your current working directory:
getwd()
#### Load libraries ####
library("tidyverse")
library("dada2")
library("phyloseq")
library("Biostrings")
library("kableExtra")
library("readxl")
#### Prepare Directories ####
# The fastq files are in this zip-file:
# https://www.dropbox.com/s/szz60vroo79imyd/fastq_files.zip?dl=0
# Download and unzip in your dada2 working directory.
# The samples should be in a subfolder simply called "fastq"
# Check your current working directory:
getwd()
# Define the name of directories to use.
# These will be created in your current working directory
fastq_dir <- "fastq"  # fastq directory with the samples that will be used
database_dir <- "databases/"  # folder with the PR2 database https://github.com/vaulot/metabarcodes_tutorials/tree/master/databases
filtered_dir <- "fastq_filtered/"  # for the fastq-files after filtering
qual_dir <- "qual_pdf/"  # quality scores plots
dada2_dir <- "dada2_results/"  # dada2 results
blast_dir <- "blast/"  # blast2 results
# Create the directories
dir.create(filtered_dir)
dir.create(qual_dir)
dir.create(dada2_dir)
dir.create(blast_dir)
#### Examine fastq files ####
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = T))
fns
fns <- fns[str_detect(basename(fns), ".fastq.gz")]
fns
fns <- fns[str_detect(basename(fns), ".fastq.gz")]
fns_R1 <- fns[str_detect(basename(fns), "R1")]
fns_R2 <- fns[str_detect(basename(fns), "R2")]
fns_R1
# Extract sample names, assuming filenames have format: 18S_SAMPLENAME_XXX.fastq.gz
sample.names <- str_split(basename(fns_R1), pattern = "_", simplify = TRUE)
sample.names <- sample.names[, 2]
sample.names
df <- data.frame()
for (i in 1:length(fns_R1)) {
# use the Biosstrings function fastq.geometry
geom <- fastq.geometry(fns_R1[i])
# extract the information on number of sequences and file name
df_one_row <- data.frame(n_seq = geom[1], file_name = basename(fns_R1[i]))
# add one line to data frame
df <- bind_rows(df, df_one_row)
}
# knitr::kable(df) # to make html table.
View(df)
ggplot(df, aes(x = n_seq)) +
geom_histogram(alpha = 0.5, position = "identity", binwidth = 15000)
hist(df$n_seq, breaks = 10)
#### Plot Quality for each fastq file ####
for (i in 1:length(fns)) {
# Use dada2 function to plot quality
p1 <- plotQualityProfile(fns[i])
# Only plot on screen for first 2 files
if (i <= 2) {
print(p1)
}
# save the file as a pdf file
p1_file <- paste0(qual_dir, basename(fns[i]), ".qual.pdf")
ggsave(plot = p1, filename = p1_file, device = "pdf", width = 15, height = 15,
scale = 1, units = "cm")
}
####
# Prepare the outputnames for filtered reads:
filt_R1 <- str_c(filtered_dir, sample.names, "_R1_filt.fastq")
filt_R2 <- str_c(filtered_dir, sample.names, "_R2_filt.fastq")
err_R1 <- learnErrors(filt_R1, multithread = TRUE)
plotErrors(err_R1, nominalQ = TRUE)
err_R2 <- learnErrors(filt_R2, multithread = T)
plotErrors(err_R2, nominalQ = TRUE)
#### STEP 3. Dereplicate the reads ####
derep_R1 <- derepFastq(filt_R1, verbose = FALSE)
derep_R2 <- derepFastq(filt_R2, verbose = FALSE)
str(derep_R1)
#### STEP 3. Dereplicate the reads ####
derep_R1 <- derepFastq(filt_R1, verbose = TRUE)
?dada
dada_R1 <- dada(derep_R1, err = err_R1, multithread = TRUE, pool = FALSE)
dada_R2 <- dada(derep_R2, err = err_R2, multithread = TRUE, pool = FALSE)
# Viewing the first entry in each of the dada objects
dada_R1[[1]]
dada_R1[[4]]
dada_R2[[]]
dada_R2[[1]]
dada_R1[[3]]
?mergers
?mergePairs
str(dada_R1)
class(dada_R1)
str(dada_R1)
dada_R1$BL040126_R1_filt.fastq
#### STEP 5. Merge Sequences
mergers <- mergePairs(dada_R1, derep_R1, dada_R2, derep_R2, verbose = TRUE)
head(mergers[[1]])
#### STEP 6. Merge  ####
seqtab <- makeSequenceTable(mergers)
seqtab
as.tibble(seqtab)
dim(seqtab)
# Make a transposed version of seqtab to make it similar to data in mothur
t_seqtab <- t(seqtab) # the function t() is a simple transposing of the matrix
t_seqtab
as.tibble(t_seqtab)
table(nchar(getSequences(seqtab)))
plot(table(nchar(getSequences(seqtab)))) #simple plot of length distribution
#### STEP 7. Remove chimeras ####
# Chimeric sequences are identified if they can be exactly reconstructed by
# a left-segment and a right-segment from two more abundant “parent” sequences
# Takes 12s on M2
# Takes 1 Min on i7
seqtab.nochim <- removeBimeraDenovo(seqtab, method = "consensus", multithread = FALSE,
verbose = TRUE)
# Get some stats:
# Compute % of non chimeras
paste0("% of non chimeras : ", sum(seqtab.nochim)/sum(seqtab) * 100)
paste0("total number of sequences : ", sum(seqtab.nochim))
#### Track number of reads at each step
getN <- function(x) sum(getUniques(x)) # example of a function in R
track <- cbind(out, sapply(dada_R1, getN), sapply(mergers, getN), rowSums(seqtab),
rowSums(seqtab.nochim))
load("~/Dropbox/Projects/00_Master_projects/21_undervisning/2023/Bio9905merg1_v23/BIO9905MERG1_V23/Dada2_Pipeline/dada2.RData")
track <- cbind(out, sapply(dada_R1, getN), sapply(mergers, getN), rowSums(seqtab),
rowSums(seqtab.nochim))
colnames(track) <- c("input", "filtered", "denoised", "merged", "tabled", "nonchim")
track
sample.names
rownames(track) <- sample.names
track
#### Transforming and saving the OTU sequences
seqtab.nochim_trans <- as.data.frame(t(seqtab.nochim)) %>% rownames_to_column(var = "sequence") %>%
rowid_to_column(var = "OTUNumber") %>% mutate(OTUNumber = sprintf("OTU_%05d",
OTUNumber)) %>% mutate(sequence = str_replace_all(sequence, "(-|\\.)", ""))
seqtab.nochim_trans
head(seqtab.nochim_trans)
#### Extract the sequences and export them in a fasta file:
df <- seqtab.nochim_trans
seq_out <- Biostrings::DNAStringSet(df$sequence)
names(seq_out) <- df$OTUNumber
seq_out
Biostrings::writeXStringSet(seq_out, str_c(dada2_dir, "OTU_no_taxonomy.fasta"),
compress = FALSE, width = 20000)
taxa
head(taxa)
as.tibble(taxa)
tail(as.tibble(taxa))
load("~/Dropbox/Projects/00_Master_projects/21_undervisning/2023/Bio9905merg1_v23/BIO9905MERG1_V23/Dada2_Pipeline/dada2.RData")
#Check at the Kingdom-level for
unique(seqtab.nochim_trans$Kingdom)
#Check at the Kingdom-level for
unique(seqtab.nochim_trans$Kingdom)
unique(seqtab.nochim_trans$Supergroup)
unique(seqtab.nochim_trans$Family)
unique(seqtab.nochim_trans$Family_boot)
bootstrap_min <- 80
# Remove OTU with annotation below the bootstrap value
seqtab.nochim_18S <- seqtab.nochim_trans %>% dplyr::filter(Supergroup_boot >= bootstrap_min)
seqtab.nochim_18S <- seqtab.nochim_trans[which(seqtab.nochim_trans$Supergroup_boot>80),]
unique(seqtab.nochim_18S$Division)
unique(seqtab.nochim_18S$Kingdom)
seqtab.nochim_18S$Division
unique(seqtab.nochim_18S$Division)
sort(unique(seqtab.nochim_18S$Division))
# Example for removing Metazoans:
seqtab.nochim_18S_noMetazoa <- seqtab.nochim_18S[which(seqtab.nochim_18S$Division!="Metazoa"),]
unique(seqtab.nochim_18S$Kingdom)
unique(seqtab.nochim_18S$Division)
unique(seqtab.nochim_18S$Family)
Sort(unique(seqtab.nochim_18S$Family))
sort(unique(seqtab.nochim_18S$Family))
#### Make Phyloseq Object ####
samdf <- data.frame(sample_name = sample.names)
rownames(samdf) <- sample.names
rownames(seqtab.nochim_18S)<-seqtab.nochim_18S$OTUNumber
OTU <- seqtab.nochim_18S %>% select_if(is.numeric) %>%
select(-contains("_boot")) %>% as.matrix() %>% otu_table(taxa_are_rows = TRUE)
TAX <- seqtab.nochim_18S %>% select(Kingdom:Species) %>%
as.matrix() %>% tax_table()
ps_dada2 <- phyloseq(OTU, sample_data(samdf), TAX)
class(ps_dada2)
ps_dada2
rank_names(ps_dada2)
otu_table(ps_dada2)
### Bar graphs ####
# Phyloseq contains wrappers for plotting functions
plot_bar(ps_dada2)
plot_bar(ps_dada2, fill = "Supergroup")
# Make it a bit better with
plot_bar(ps_dada2, fill = "Division")+
geom_bar(aes(color=Division, fill=Division), stat="identity", position="stack")
#### Load libraries ####
library("tidyverse")
library("dada2")
library("phyloseq")
library("Biostrings")
library("kableExtra")
library("readxl")
