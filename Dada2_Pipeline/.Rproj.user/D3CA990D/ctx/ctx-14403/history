fns
# Define the name of directories to use.
fastq_dir <- "../fastq/"  # fastq directory with the samples we are using
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = TRUE))
fns
str_detect(basename(fns)
)
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = F))
fns
fns
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files("fastq/", full.names = F))
fns
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files("fastq/", full.names = T))
fns
# Define the name of directories to use.
fastq_dir <- "fastq"  # fastq directory with the samples we are using
# Define the name of directories to use.
fastq_dir <- "fastq/"  # fastq directory with the samples we are using
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files("fastq/", full.names = F))
fns_R1 <- fns[str_detect(basename(fns), "R1")]
fns_R1
fns <- fns[str_detect(basename(fns), ".clipped.fastq.gz")]
fns
fns_R1 <- fns[str_detect(basename(fns), "R1")]
fns_R2 <- fns[str_detect(basename(fns), "R2")]
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq
sample.names <- str_split(basename(fns_R1), pattern = "_", simplify = TRUE)
sample.names
sample.names <- sample.names[, 2]
sample.names
####  ####
df <- data.frame()
for (i in 1:length(fns_R1)) {
# use the Biosstrings function fastq.geometry
geom <- fastq.geometry(fns_R1[i])
# extract the information on number of sequences and file name
df_one_row <- data.frame(n_seq = geom[1], file_name = basename(fns_R1[i]))
# add one line to data frame
df <- bind_rows(df, df_one_row)
}
?fastq.geometry
#### 5.5.3 ####
for (i in 1:length(fns)) {
# Use dada2 function to plot quality
p1 <- plotQualityProfile(fns[i])
# Only plot on screen for first 2 files
if (i <= 2) {
print(p1)
}
# save the file as a pdf file (uncomment to execute)
p1_file <- paste0(qual_dir, basename(fns[i]), ".qual.pdf")
ggsave(plot = p1, filename = p1_file, device = "pdf", width = 15, height = 15,
scale = 1, units = "cm")
}
fns
plotQualityProfile(fns[i])
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files("fastq/", full.names = T))
fns <- sort(list.files("fastq/", full.names = T))
fns
plotQualityProfile(fns[i])
# Define the name of directories to use.
fastq_dir <- "fastq"  # fastq directory with the samples we are using
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq, full.names = T))
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = T))
fns
fns <- fns[str_detect(basename(fns), ".clipped.fastq.gz")]
fns
fns_R1 <- fns[str_detect(basename(fns), "R1")]
fns_R2 <- fns[str_detect(basename(fns), "R2")]
fns_R1
# Extract sample names, assuming filenames have format: 18S_SAMPLENAME_XXX.fastq.gz
sample.names <- str_split(basename(fns_R1), pattern = "_", simplify = TRUE)
sample.names
sample.names <- sample.names[, 2]
sample.names
basename(fns)
####  ####
df <- data.frame()
for (i in 1:length(fns_R1)) {
# use the Biosstrings function fastq.geometry
geom <- fastq.geometry(fns_R1[i])
# extract the information on number of sequences and file name
df_one_row <- data.frame(n_seq = geom[1], file_name = basename(fns_R1[i]))
# add one line to data frame
df <- bind_rows(df, df_one_row)
}
df
knitr::kable(df)
# knitr::kable(df) # to make html table.
View(df)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 16) + xlim(9000, 11000)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity")
ggplot(df, aes(x = n_seq)) +
geom_histogram(alpha = 0.5, position = "identity"),binwidth = 16)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 16)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 16)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity")
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity")
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity", binwidth = 50)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 20)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 40)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 30)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 10)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 100)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 1000)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 10000)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 100000)
ggplot(df, aes(x = n_seq)) + geom_histogram(alpha = 0.5, position = "identity",
binwidth = 20000)
ggplot(df, aes(x = n_seq)) +
geom_histogram(alpha = 0.5, position = "identity", binwidth = 20000)
ggplot(df, aes(x = n_seq)) +
geom_histogram(alpha = 0.5, position = "identity", binwidth = 15000)
hist(df$n_seq)
hist(df$n_seq, breaks = 100)
hist(df$n_seq, breaks = 10)
#### Plot Quality for each fastq file ####
for (i in 1:length(fns)) {
# Use dada2 function to plot quality
p1 <- plotQualityProfile(fns[i])
# Only plot on screen for first 2 files
if (i <= 2) {
print(p1)
}
# save the file as a pdf file (uncomment to execute)
p1_file <- paste0(qual_dir, basename(fns[i]), ".qual.pdf")
ggsave(plot = p1, filename = p1_file, device = "pdf", width = 15, height = 15,
scale = 1, units = "cm")
}
length(fns)
plotQualityProfile(fns[2])
plotQualityProfile(fns[3])
plotQualityProfile(fns[4])
plotQualityProfile(fns[5])
fns[5]
fns[4]
plotQualityProfile(fns[7])
plotQualityProfile(fns[9])
plotQualityProfile(fns[10])
plotQualityProfile(fns[14])
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = T))
fns
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = T))
fns <- fns[str_detect(basename(fns), ".clipped.fastq.gz")]
fns
fns <- fns[str_detect(basename(fns), ".fastq.gz")]
fns
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = T))
fns
fns <- fns[str_detect(basename(fns), "*.fastq.gz")]
fns <- fns[str_detect(basename(fns), ".fastq.gz")]
fns
fns_R1 <- fns[str_detect(basename(fns), "R1")]
fns_R2 <- fns[str_detect(basename(fns), "R2")]
# Extract sample names, assuming filenames have format: 18S_SAMPLENAME_XXX.fastq.gz
sample.names <- str_split(basename(fns_R1), pattern = "_", simplify = TRUE)
sample.names <- sample.names[, 2]
sample.names
#### Make a dataframe with the number of sequences in each file ####
df <- data.frame()
for (i in 1:length(fns_R1)) {
# use the Biosstrings function fastq.geometry
geom <- fastq.geometry(fns_R1[i])
# extract the information on number of sequences and file name
df_one_row <- data.frame(n_seq = geom[1], file_name = basename(fns_R1[i]))
# add one line to data frame
df <- bind_rows(df, df_one_row)
}
# knitr::kable(df) # to make html table.
View(df)
ggplot(df, aes(x = n_seq)) +
geom_histogram(alpha = 0.5, position = "identity", binwidth = 15000)
hist(df$n_seq, breaks = 10)
#### Plot Quality for each fastq file ####
for (i in 1:length(fns)) {
# Use dada2 function to plot quality
p1 <- plotQualityProfile(fns[i])
# Only plot on screen for first 2 files
if (i <= 2) {
print(p1)
}
# save the file as a pdf file (uncomment to execute)
p1_file <- paste0(qual_dir, basename(fns[i]), ".qual.pdf")
ggsave(plot = p1, filename = p1_file, device = "pdf", width = 15, height = 15,
scale = 1, units = "cm")
}
#### 5.6.1
filt_R1 <- str_c(filtered_dir, sample.names, "_R1_filt.fastq")
filt_R2 <- str_c(filtered_dir, sample.names, "_R2_filt.fastq")
filt_R1
primer_set_fwd = c("CCAGCAGCCGCGGTAATTCC", "CCAGCACCCGCGGTAATTCC", "CCAGCAGCTGCGGTAATTCC",
"CCAGCACCTGCGGTAATTCC")
primer_set_rev = c("ACTTTCGTTCTTGATYRATGA")
primer_length_fwd <- str_length(primer_set_fwd[1])
primer_length_rev <- str_length(primer_set_rev[1])
ptm <- proc.time()
out <- filterAndTrim(fns_R1, filt_R1, fns_R2, filt_R2, truncLen = c(250, 200),
trimLeft = c(primer_length_fwd, primer_length_rev), maxN = 0,
maxEE = c(2, 2), truncQ = 2, rm.phix = TRUE,
compress = FALSE, multithread = FALSE)
proc.time() - ptm
proc.time()
proc.time()
proc.time()
ptm <- proc.time()
err_R1 <- learnErrors(filt_R1, multithread = TRUE)
plotErrors(err_R1, nominalQ = TRUE)
learn_error_time_multi<- proc.time() - ptm
ptm <- proc.time()
err_R2 <- learnErrors(filt_R2, multithread = FALSE)
plotErrors(err_R2, nominalQ = TRUE)
learn_error_time_nomulti<- proc.time() - ptm
learn_error_time_nomulti
learn_error_time_multi
ptm <- proc.time()
derep_R1 <- derepFastq(filt_R1, verbose = FALSE)
derep_R2 <- derepFastq(filt_R2, verbose = FALSE)
proc.time() - ptm
ptm <- proc.time()
dada_R1 <- dada(derep_R1, err = err_R1, multithread = TRUE, pool = FALSE)
dada_mulit<-proc.time() - ptm
ptm <- proc.time()
dada_R2 <- dada(derep_R2, err = err_R2, multithread = FALSE, pool = FALSE)
dada_nomulit<-proc.time() - ptm
dada_mulit
dada_nomulit
save.image("dada2.RData")
#### Prepare Directories ####
# Check your current working directory:
getwd()
# Define the name of directories to use.
fastq_dir <- "fastq"  # fastq directory with the samples we are using
database_dir <- "databases/"  # folder with the PR2 database https://github.com/vaulot/metabarcodes_tutorials/tree/master/databases
filtered_dir <- "fastq_filtered/"  # fastq filtered
qual_dir <- "qual_pdf/"  # qual pdf
dada2_dir <- "dada2/"  # dada2 results
blast_dir <- "blast/"  # blast2 results
dir.create(filtered_dir)
dir.create(qual_dir)
dir.create(dada2_dir)
dir.create(blast_dir)
primer_set_fwd = c("CCAGCAGCCGCGGTAATTCC", "CCAGCACCCGCGGTAATTCC", "CCAGCAGCTGCGGTAATTCC",
"CCAGCACCTGCGGTAATTCC")
primer_set_rev = c("ACTTTCGTTCTTGATYRATGA")
primer_length_fwd <- str_length(primer_set_fwd[1])
primer_length_rev <- str_length(primer_set_rev[1])
primer_set_rev = c("ACTTTCGTTCTTGATYRATGA")
primer_length_fwd <- str_length(primer_set_fwd[1])
primer_length_rev <- str_length(primer_set_rev[1])
library("dada2")
library("phyloseq")
library("Biostrings")
library("ggplot2")
library("dplyr")
library("tidyr")
library("tibble")
library("readxl")
library("readr")
library("stringr")
library("kableExtra")
#### Prepare Directories ####
# Check your current working directory:
getwd()
# Define the name of directories to use.
fastq_dir <- "fastq"  # fastq directory with the samples we are using
database_dir <- "databases/"  # folder with the PR2 database https://github.com/vaulot/metabarcodes_tutorials/tree/master/databases
filtered_dir <- "fastq_filtered/"  # fastq filtered
qual_dir <- "qual_pdf/"  # qual pdf
dada2_dir <- "dada2/"  # dada2 results
blast_dir <- "blast/"  # blast2 results
dir.create(filtered_dir)
dir.create(qual_dir)
dir.create(dada2_dir)
dir.create(blast_dir)
primer_set_fwd = c("CCAGCAGCCGCGGTAATTCC", "CCAGCACCCGCGGTAATTCC", "CCAGCAGCTGCGGTAATTCC",
"CCAGCACCTGCGGTAATTCC")
primer_set_rev = c("ACTTTCGTTCTTGATYRATGA")
primer_length_fwd <- str_length(primer_set_fwd[1])
primer_length_rev <- str_length(primer_set_rev[1])
primer_length_fwd
primer_length_rev
#### PR2 taxonomic levels
PR2_tax_levels <- c("Kingdom", "Supergroup", "Division", "Class", "Order", "Family",
"Genus", "Species")
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = T))
fns
fns <- fns[str_detect(basename(fns), ".fastq.gz")]
fns_R1 <- fns[str_detect(basename(fns), "R1")]
fns_R2 <- fns[str_detect(basename(fns), "R2")]
fns_R1
# Extract sample names, assuming filenames have format: 18S_SAMPLENAME_XXX.fastq.gz
sample.names <- str_split(basename(fns_R1), pattern = "_", simplify = TRUE)
sample.names <- sample.names[, 2]
#### Make a dataframe with the number of sequences in each file ####
df <- data.frame()
for (i in 1:length(fns_R1)) {
# use the Biosstrings function fastq.geometry
geom <- fastq.geometry(fns_R1[i])
# extract the information on number of sequences and file name
df_one_row <- data.frame(n_seq = geom[1], file_name = basename(fns_R1[i]))
# add one line to data frame
df <- bind_rows(df, df_one_row)
}
# knitr::kable(df) # to make html table.
View(df)
ggplot(df, aes(x = n_seq)) +
geom_histogram(alpha = 0.5, position = "identity", binwidth = 15000)
hist(df$n_seq, breaks = 10)
#### Plot Quality for each fastq file ####
for (i in 1:length(fns)) {
# Use dada2 function to plot quality
p1 <- plotQualityProfile(fns[i])
# Only plot on screen for first 2 files
if (i <= 2) {
print(p1)
}
# save the file as a pdf file (uncomment to execute)
p1_file <- paste0(qual_dir, basename(fns[i]), ".qual.pdf")
ggsave(plot = p1, filename = p1_file, device = "pdf", width = 15, height = 15,
scale = 1, units = "cm")
}
#### 5.6.1
filt_R1 <- str_c(filtered_dir, sample.names, "_R1_filt.fastq")
filt_R2 <- str_c(filtered_dir, sample.names, "_R2_filt.fastq")
filt_R1
#### SIMPLE FILTER BY LENGTH OF PRIMER
ptm <- proc.time()
out <- filterAndTrim(fns_R1, filt_R1, fns_R2, filt_R2, truncLen = c(250, 200),
trimLeft = c(primer_length_fwd, primer_length_rev), maxN = 0,
maxEE = c(2, 2), truncQ = 2, rm.phix = TRUE,
compress = FALSE, multithread = FALSE)
proc.time() - ptm
ptm <- proc.time()
err_R1 <- learnErrors(filt_R1, multithread = TRUE)
plotErrors(err_R1, nominalQ = TRUE)
learn_error_time_multi<- proc.time() - ptm
learn_error_time_nomulti
learn_error_time_multi
err_R2 <- learnErrors(filt_R2, multithread = T)
plotErrors(err_R2, nominalQ = TRUE)
ptm <- proc.time()
derep_R1 <- derepFastq(filt_R1, verbose = FALSE)
derep_R2 <- derepFastq(filt_R2, verbose = FALSE)
proc.time() - ptm
# MacBook
#user  system elapsed
#15.739   3.058  19.755
# Name the derep-class objects by the sample names
names(derep_R1) <- sample.names
names(derep_R2) <- sample.names
derep_R1
derep_R2
sample.names
names(derep_R2) <- sample.names
derep_R2
ptm <- proc.time()
dada_R1 <- dada(derep_R1, err = err_R1, multithread = TRUE, pool = FALSE)
dada_mulit<-proc.time() - ptm
dada_mulit
microbenchmark
install.packages(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(2+2)
ptm <- proc.time()
microbenchmark(
dada_R2 <- dada(derep_R2, err = err_R2, multithread = FALSE, pool = FALSE)
)
install.packages("rmarkdown")
library("rmarkdown")
?render
render("DADA2_pipeline.R", output_format = "all", output_dir ="test/")
install.packages("stringr")
library("rmarkdown")
render("DADA2_pipeline.R", output_format = "all", output_dir ="test/")
install.packages("stringr")
library("rmarkdown")
render("DADA2_pipeline.R", output_format = "all", output_dir ="test/")
install.packages("readr")
install.packages(c("callr", "cluster", "haven", "highr", "mgcv", "reticulate", "spatstat.core", "spatstat.geom", "tidyverse", "withr"))
?render
??render
library("rmarkdown")
?render
render("DADA2_pipeline.R", output_format = "html_document", output_dir ="test/")
install.packages("stringr")
render("DADA2_pipeline.R", output_format = "html_document", output_dir ="test/")
library("rmarkdown")
render("DADA2_pipeline.R", output_format = "html_document", output_dir ="test/")
remotes::install_github('rstudio/rmarkdown')
render("DADA2_pipeline.R", output_format = "html_document", output_dir ="test/")
library("rmarkdown")
render("DADA2_pipeline.R", output_format = "html_document", output_dir ="test/")
library("rmarkdown")
render("DADA2_pipeline.R", output_format = "pdf_document", output_dir ="test/")
install.packages("stringr")
knitr::spin()
library("knitr")
knitr::spin()
?spin
knitr::spin("")
knitr::spin("DADA2_pipeline.R")
plot(cars)
library("dada2")
library("phyloseq")
library("Biostrings")
library("ggplot2")
library("dplyr")
library("tidyr")
library("tibble")
library("readxl")
library("readr")
library("stringr")
library("kableExtra")
library("tidyverse")
#library("pr2database")
PR2_tax_levels <- c("Kingdom", "Supergroup", "Division", "Class",
"Order", "Family",
"Genus", "Species")
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = T))
fastq_dir <- "fastq"  # fastq directory with the samples we are using
database_dir <- "databases/"  # folder with the PR2 database https://github.com/vaulot/metabarcodes_tutorials/tree/master/databases
filtered_dir <- "fastq_filtered/"  # fastq filtered
qual_dir <- "qual_pdf/"  # qual pdf
dada2_dir <- "dada2_out/"  # dada2 results
blast_dir <- "blast/"  # blast2 results
dir.create(filtered_dir)
dir.create(qual_dir)
dir.create(dada2_dir)
dir.create(blast_dir)
primer_set_fwd = c("CCAGCAGCCGCGGTAATTCC", "CCAGCACCCGCGGTAATTCC", "CCAGCAGCTGCGGTAATTCC",
"CCAGCACCTGCGGTAATTCC")
primer_set_rev = c("ACTTTCGTTCTTGATYRATGA")
primer_length_fwd <- str_length(primer_set_fwd[1])
primer_length_rev <- str_length(primer_set_rev[1])
PR2_tax_levels <- c("Kingdom", "Supergroup", "Division", "Class",
"Order", "Family",
"Genus", "Species")
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = T))
fns <- fns[str_detect(basename(fns), ".fastq.gz")]
fns_R1 <- fns[str_detect(basename(fns), "R1")]
fns_R2 <- fns[str_detect(basename(fns), "R2")]
# Extract sample names, assuming filenames have format: 18S_SAMPLENAME_XXX.fastq.gz
sample.names <- str_split(basename(fns_R1), pattern = "_", simplify = TRUE)
sample.names <- sample.names[, 2]
sample.names <- sample.names[, 2]
sample.names
list.files(fastq_dir, full.names = T)
PR2_tax_levels <- c("Kingdom", "Supergroup", "Division", "Class",
"Order", "Family",
"Genus", "Species")
#### Examine fastq files
# get a list of all fastq files in the fastq" directory and separate R1 and R2
fns <- sort(list.files(fastq_dir, full.names = T))
fns <- fns[str_detect(basename(fns), ".fastq.gz")]
fns_R1 <- fns[str_detect(basename(fns), "R1")]
fns_R2 <- fns[str_detect(basename(fns), "R2")]
# Extract sample names, assuming filenames have format: 18S_SAMPLENAME_XXX.fastq.gz
sample.names <- str_split(basename(fns_R1), pattern = "_", simplify = TRUE)
sample.names <- sample.names[, 2]
```{#r, hide}
install.packages("readr")     # To read and write files
install.packages("readxl")    # To read excel files
install.packages("dplyr")     # To manipulate dataframes
install.packages("tibble")    # To work with data frames
install.packages("tidyr")     # To work with data frames
install.packages("stringr")   # To manipulate strings
install.packages("ggplot2")   # To do plots
install.packages("kableExtra")  # necessary for nice table formatting with knitr
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install(version = "3.10")
BiocManager::install(c("dada2", "phyloseq","Biostrings"))
